services:
  redis:
    image: redis:6
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=analyzer
    ports:
      - "5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    ports:
      - "8001:8000"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/analyzer
      - INFURA_KEY=${INFURA_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
    restart: unless-stopped

  celery_worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/analyzer
      - INFURA_KEY=${INFURA_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
    restart: unless-stopped

  flower:
    build:
      context: ..
      dockerfile: docker/Dockerfile.flower
    depends_on:
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_started
    ports:
      - "5556:5555"
    environment:
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    restart: unless-stopped


volumes:
  redis_data:
  db_data: